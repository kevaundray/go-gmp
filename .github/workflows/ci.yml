name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.21'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m
    
    - name: Check go mod tidy
      run: |
        go mod tidy
        git diff --exit-code go.mod

  test-coverage:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc wget
    
    - name: Build GMP static library
      run: |
        cd scripts
        ./build-static.sh
    
    - name: Build wrapper
      run: |
        cd scripts
        ./build_wrapper.sh
    
    - name: Run tests with coverage
      run: |
        go test -v -coverprofile=coverage.out -covermode=atomic ./...
        go tool cover -html=coverage.out -o coverage.html
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage HTML
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.html

  build-release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc wget
    
    - name: Build GMP static library
      run: |
        cd scripts
        ./build-static.sh
    
    - name: Build wrapper
      run: |
        cd scripts
        ./build_wrapper.sh
    
    - name: Build test binary
      run: |
        go build -v ./...
        go test -c -o gmp-test
    
    - name: Check binary dependencies
      run: |
        echo "Binary dependencies:"
        ldd gmp-test || echo "No dynamic dependencies (static binary)"
        
    - name: Upload test binary
      uses: actions/upload-artifact@v4
      with:
        name: test-binary
        path: gmp-test